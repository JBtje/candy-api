openapi: 3.0.0
x-samples-languages: ['curl', 'node', 'php', 'javascript', 'python']
info:
  title: GetCandy
  contact:
    name: GetCandy
    url: 'https://getcandy.io'
    email: support@getcandy.io
  version: 1.0.0
  license:
    name: MIT
  description: The GetCandy API
servers:
  - url: 'http://localhost:8000/api/v1'
paths:
  '/':
    $ref: './root/paths/root.yaml'
  '/account/password':
    $ref: './account/paths/account.password.yaml'
  '/addresses':
    $ref: './addresses/paths/addresses.yaml'
  '/addresses/{addressId}':
    $ref: './addresses/paths/addresses.id.yaml'
  /channels:
    $ref: './channels/paths/channels.yaml'
  '/channels/{channelId}':
    $ref: './channels/paths/channels.id.yaml'
  /customers:
    $ref: './customers/paths/customers.yaml'
  '/customers/{customerId}/users':
    $ref: './customers/paths/customers.id.users.yaml'
  '/customers/{customerId}/customer-groups':
    $ref: './customers/paths/customers.id.customer-groups.yaml'
  '/customers/{customerId}':
    $ref: './customers/paths/customers.id.yaml'
  /currencies:
    $ref: './currencies/paths/currencies.yaml'
  '/currencies/{currencyId}':
    $ref: './currencies/paths/currencies.id.yaml'
  '/countries':
    $ref: './countries/paths/countries.yaml'
  '/countries/{countryId}':
    $ref: './countries/paths/countries.id.yaml'
  '/customer-groups':
    $ref: './customer-groups/paths/customer-groups.yaml'
  '/customer-groups/{customerGroupId}':
    $ref: './customer-groups/paths/customer-groups.id.yaml'
  /languages:
    $ref: './languages/paths/languages.yaml'
  '/languages/{languageId}':
    $ref: './languages/paths/languages.id.yaml'
### BELOW: Paths that have not been updated
  /orders:
    get:
      summary: Get orders
      tags:
        - Orders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCollection'
      operationId: get-orders
      description: "If you're an admin user you will be able to see all orders, otherwise only the current users orders will be returned."
      parameters:
        - schema:
            type: string
          in: query
          name: include
    post:
      summary: Create Order
      operationId: post-orders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                forbidden-example:
                  value:
                    http_code: 403
                    message: This basket already has an order that has been placed
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                unprocessable-example:
                  value:
                    basket_id:
                      - The basket id field is required.
      description: Create an Order from a Basket instance
      tags:
        - Orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderBody'
  '/orders/{orderId}':
    parameters:
      - schema:
          type: string
        name: orderId
        in: path
        required: true
    get:
      summary: Get Order
      tags:
        - Orders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-orders-orderId
      description: |-
        Get an Order by it's ID.

        You must be an admin or owner to retrieve the order, otherwise you'll get a 404.
    put:
      summary: Update Order
      operationId: put-orders-orderId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Order'
      tags:
        - Orders
      description: Update an Order
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tracking_no:
                  type: string
                status:
                  type: string
                  description: Corresponds to status set in config
                send_emails:
                  type: boolean
                  default: false
                  example: true
        description: ''
      parameters:
        - schema:
            type: string
          in: query
          name: include
  /orders/types:
    get:
      summary: Get order types
      tags:
        - Orders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderTypeCollection'
              examples:
                order-types-example:
                  value:
                    data:
                      - label: Collection
                      - label: PayPal
                      - label: SagePay
      operationId: get-orders-types
      description: Returns all order types currently in the system
  /orders/process:
    post:
      summary: Processes an order on the API
      tags:
        - Orders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: post-orders-process
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                payment_type_id:
                  type: string
                payment_type:
                  type: string
                order_id:
                  type: string
                payment_token:
                  type: string
                customer_reference:
                  type: string
                meta:
                  type: array
                  items:
                    type: object
                notes:
                  type: string
                company_name:
                  type: string
              required:
                - order_id
                - payment_token
  /attributes:
    get:
      summary: Get Attributes
      tags:
        - Attributes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeCollection'
              examples:
                paginated-example:
                  value:
                    data:
                      - id: dnj4zky5
                        name:
                          en: Name
                          sv: Namn
                        handle: name
                        position: '1'
                        filterable: false
                        scopeable: true
                        translatable: true
                        variant: false
                        searchable: true
                        localised: true
                        type: text
                        required: true
                        lookups: null
                        system: false
                        group:
                          data:
                            id: vokq5kmj
                            name:
                              en: General
                            handle: general
                            position: '1'
                    links:
                      first: 'http://storefront.test/api/v1/attributes?page=1'
                      last: 'http://storefront.test/api/v1/attributes?page=5'
                      prev: null
                      next: 'http://storefront.test/api/v1/attributes?page=2'
                    meta:
                      current_page: 1
                      from: 1
                      last_page: 5
                      path: 'http://storefront.test/api/v1/attributes'
                      per_page: 15
                      to: 15
                      total: 70
      operationId: get-attributes
      parameters: []
      description: Return a paged array of attributes
    post:
      summary: Create Attribute
      tags:
        - Attributes
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributeResponse'
              examples:
                post-example:
                  value:
                    data:
                      id: w52log2p
                      name:
                        en: New attribute
                      handle: new-attribute
                      position: 2
                      system: false
                      lookups: null
                      required: false
                      type: text
                      localised: false
                      searchable: false
                      variant: false
                      translatable: false
                      scopeable: false
                      filterable: false
                    meta:
                      lang: en
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  group_id:
                    type: array
                    items:
                      type: string
                  name:
                    type: array
                    items:
                      type: string
                  handle:
                    type: array
                    items:
                      type: string
              examples:
                full-unprocessable:
                  value:
                    group_id:
                      - The group id field is required.
                    name:
                      - The name field is required.
                    handle:
                      - The handle field is required.
      operationId: post-attributes
      description: Create a new attribute
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                group_id:
                  type: string
                  example: q1jo3jm4
                name:
                  type: array
                  items:
                    type: object
                    properties:
                      locale:
                        type: string
                    required:
                      - locale
                handle:
                  type: string
                position:
                  type: integer
                  format: int32
                  example: 12
                filterable:
                  type: boolean
                  default: false
                scopeable:
                  type: boolean
                  default: false
                translatable:
                  type: boolean
                  default: false
                variant:
                  type: boolean
                  default: false
                searchable:
                  type: boolean
                  default: false
                localised:
                  type: boolean
                  default: false
                type:
                  type: string
                  default: text
                required:
                  type: boolean
                  default: false
                lookups:
                  type: array
                  items:
                    type: object
                    properties:
                      label:
                        type: string
                      value:
                        type: string
                system:
                  type: boolean
                  default: false
              required:
                - group_id
                - name
                - handle
            examples:
              post-example:
                value:
                  group_id: q1w24k3l
                  name:
                    en: New attribute
                  handle: new-attribute
                  lookups:
                    label: Lookup 1
                    value: lookup-1
      parameters: []
  /categories:
    get:
      summary: Return a paged array of categories
      tags:
        - Categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryCollection'
      operationId: get-categories
      parameters:
        - schema:
            type: boolean
          in: query
          name: full_response
          description: ''
        - schema:
            type: string
          in: query
          name: include
        - schema:
            type: boolean
          in: query
          name: tree
          description: Whether response should be a node tree
      description: Returns a paginated resource of categories
    post:
      summary: Create a new category
      tags:
        - Categories
      operationId: post-categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Unprocessable:
                  value:
                    url:
                      - The url field is required.
      description: "Creates a new category and returns it's resource."
  '/categories/{categoryId}':
    parameters:
      - schema:
          type: string
        name: categoryId
        in: path
        required: true
        description: ''
    get:
      summary: Return a single category
      tags:
        - Categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
              examples: {}
      operationId: get-categories-categoryId
      parameters:
        - schema:
            type: string
          in: query
          name: includes
      description: Returns a single category from a given ID
    put:
      summary: Update a category
      operationId: put-categories-categoryId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Unprocessable Entity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAttributesBody'
        description: ''
      tags:
        - Categories
      description: Update a category using a given ID.
  /assets:
    put:
      summary: Update Assets
      operationId: put-assets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAssetBody'
        description: ''
      tags:
        - Assets
      description: Update all assets in the given array of ids.
    post:
      summary: Create Asset
      tags:
        - Assets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetResponse'
      operationId: post-assets
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateAssetBody'
        description: ''
      description: Upload an asset to a model
  /assets/simple:
    post:
      summary: Simple asset upload
      tags:
        - Assets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetSimple'
              examples:
                upload-example:
                  value:
                    path: uploads/01/04/WGWVDkB2VXkDKx4UeeLnStBwnEJXGL2Vd6j5Le1P.png
                    filename: the-secret-recipe.png
                    url: 'http://storefront.test/storage/uploads/01/04/WGWVDkB2VXkDKx4UeeLnStBwnEJXGL2Vd6j5Le1P.png'
                    thumbnail: uploads/01/04/thumbnails/WGWVDkB2VXkDKx4UeeLnStBwnEJXGL2Vd6j5Le1P.png
                    thumbnail_url: 'http://storefront.test/storage/uploads/01/04/thumbnails/WGWVDkB2VXkDKx4UeeLnStBwnEJXGL2Vd6j5Le1P.png'
      operationId: post-assets-simple
      description: This endpoint allows you to upload an asset without having to attach it to a model. This is good for one time uploads where you just want to get back a URL
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AssetSimpleUploadBody'
        description: ''
  '/assets/{assetId}/detach/{ownerId}':
    $ref: './assets/paths/assets.id.detach.id.yaml'
  '/associations/groups':
    $ref: './associations/paths/associations.groups.yaml'
  '/attributes':
    $ref: './attributes/paths/attributes.yaml'
  '/attributes/order':
    $ref: './attributes/paths/attributes.order.yaml'
  '/attributes/{attributeId}':
    $ref: './attributes/paths/attributes.id.yaml'
  '/attribute-groups':
    $ref: './attribute-groups/paths/attribute-groups.yaml'
  '/attribute-groups/reorder':
    $ref: './attribute-groups/paths/attribute-groups.reorder.yaml'
  '/attribute-groups/{attributeGroupId}':
    $ref: './attribute-groups/paths/attribute-groups.id.yaml'
  '/baskets':
    $ref: './baskets/paths/baskets.yaml'
  '/baskets/{basketId}/meta':
    $ref: './baskets/paths/baskets.id.meta.yaml'
  '/baskets/resolve':
    $ref: './baskets/paths/baskets.resolve.yaml'
  '/baskets/current':
    $ref: './baskets/paths/baskets.current.yaml'
  '/baskets/{basketId}/save':
    $ref: './baskets/paths/baskets.id.save.yaml'
  '/baskets/{basketId}/claim':
    $ref: './baskets/paths/baskets.id.claim.yaml'
  '/baskets/{basketId}':
    $ref: './baskets/paths/baskets.id.yaml'
  '/baskets/saved':
    $ref: './baskets/paths/baskets.saved.yaml'
  '/baskets/saved/{basketId}':
    $ref: './baskets/paths/baskets.saved.id.yaml'
  '/baskets/{basketId}/discounts':
    $ref: './baskets/paths/baskets.id.discounts.yaml'
  '/basket-lines':
    $ref: './basket-lines/paths/basket-lines.yaml'
  '/basket-lines/{basketLineId}':
    $ref: './basket-lines/paths/basket-lines.id.yaml'
  '/basket-lines/{basketLineId}/add':
    $ref: './basket-lines/paths/basket-lines.id.add.yaml'
  '/basket-lines/{basketLineId}/remove':
    $ref: './basket-lines/paths/basket-lines.id.remove.yaml'
  '/categories':
    $ref: './categories/paths/categories.yaml'
  '/categories/{categoryId}':
    $ref: './categories/paths/categories.id.yaml'
  '/categories/{categoryId}/layouts':
    $ref: './categories/paths/categories.id.layouts.yaml'
  '/categories/{categoryId}/routes':
    $ref: './categories/paths/categories.id.routes.yaml'
  '/categories/parent/{parentId}':
    $ref: './categories/paths/categories.parent.id.yaml'
  '/categories/reorder':
    $ref: './categories/paths/categories.reorder.yaml'
  '/categories/{categoryId}/products':
    $ref: './categories/paths/categories.id.products.yaml'
  '/categories/{categoryId}/channels':
    $ref: './categories/paths/categories.id.channels.yaml'
  '/categories/{categoryId}/drafts':
    $ref: './categories/paths/categories.id.drafts.yaml'
  '/categories/{categoryId}/customer-groups':
    $ref: './categories/paths/categories.id.customer-groups.yaml'
  '/channels':
    $ref: './channels/paths/channels.yaml'
  '/channels/{channelId}':
    $ref: './channels/paths/channels.id.yaml'
  '/collections/{collectionId}/routes':
    $ref: './collections/paths/collections.id.routes.yaml'
  '/collections/{collectionId}/products':
    $ref: './collections/paths/collections.id.products.yaml'
  '/collections':
    $ref: './collections/paths/collections.yaml'
  '/collections/{collectionId}':
    $ref: './collections/paths/collections.id.yaml'
  '/countries':
    $ref: './countries/paths/countries.yaml'
  '/countries/{countryId}':
    $ref: './countries/paths/countries.id.yaml'
  '/customer-groups':
    $ref: './customer-groups/paths/customer-groups.yaml'
  '/customer-groups/{customerGroupId}':
    $ref: './customer-groups/paths/customer-groups.id.yaml'
  '/customers':
    $ref: './customers/paths/customers.yaml'
  '/customers/fields':
    $ref: './customers/paths/customers.fields.yaml'
  '/customers/{customerId}/users':
    $ref: './customers/paths/customers.id.users.yaml'
  '/customers/{customerId}/customer-groups':
    $ref: './customers/paths/customers.id.customer-groups.yaml'
  '/customers/{customerId}':
    $ref: './customers/paths/customers.id.yaml'
  '/discounts':
    $ref: './discounts/paths/discounts.yaml'
  '/discounts/{discountId}':
    $ref: './discounts/paths/discounts.id.yaml'
  '/languages':
    $ref: './languages/paths/languages.yaml'
  '/languages/{languageId}':
    $ref: './languages/paths/languages.id.yaml'
  '/layouts':
    $ref: './layouts/paths/layouts.yaml'
  '/orders':
    $ref: './orders/paths/orders.yaml'
  '/orders/{orderId}':
    $ref: './orders/paths/orders.id.yaml'
  '/orders/types':
    $ref: './orders/paths/orders.types.yaml'
  '/orders/process':
    $ref: './orders/paths/orders.process.yaml'
  '/orders/email-preview/{status}':
    $ref: './orders/paths/orders.email-preview.status.yaml'
  '/orders/bulk':
    $ref: './orders/paths/orders.bulk.yaml'
  '/orders/{orderId}/expire':
    $ref: './orders/paths/orders.id.expire.yaml'
  '/orders/{orderId}/shipping/address':
    $ref: './orders/paths/orders.id.shipping.address.yaml'
  '/orders/{orderId}/shipping/methods':
    $ref: './orders/paths/orders.id.shipping.methods.yaml'
  '/orders/{orderId}/shipping/cost':
    $ref: './orders/paths/orders.id.shipping.cost.yaml'
  '/orders/{orderId}/contact':
    $ref: './orders/paths/orders.id.contact.yaml'
  '/orders/{orderId}/billing/address':
    $ref: './orders/paths/orders.id.billing.address.yaml'
  '/orders/{orderId}/lines':
    $ref: './orders/paths/orders.id.lines.yaml'
  '/orders/lines/{orderLineId}':
    $ref: './orders/paths/orders.lines.id.yaml'
  '/orders/{orderId}/invoice':
    $ref: './orders/paths/orders.id.invoice.yaml'
  '/payments/{transactionId}/refund':
    $ref: './payments/paths/payments.id.refund.yaml'
  '/payments/{transactionId}/void':
    $ref: './payments/paths/payments.id.void.yaml'
  '/payments/3d-secure':
    $ref: './payments/paths/payments.3d-secure.yaml'
  '/payments/provider':
    $ref: './payments/paths/payments.provider.yaml'
  '/payments/types':
    $ref: './payments/paths/payments.types.yaml'
  '/product-families':
    $ref: './product-families/paths/product-families.yaml'
  '/product-families/{productFamilyId}':
    $ref: './product-families/paths/product-families.id.yaml'
  '/products':
    $ref: './products/paths/products.yaml'
  '/products/recommended':
    $ref: './products/paths/products.recommended.yaml'
  '/products/{productId}':
    $ref: './products/paths/products.id.yaml'
  '/products/variants':
    $ref: './products/paths/products.variants.yaml'
  '/products/variants/{productVariantId}':
    $ref: './products/paths/products.variants.id.yaml'
  '/products/variants/{productVariantId}/inventory':
    $ref: './products/paths/products.variants.id.inventory.yaml'
  '/products/{productId}/duplicate':
    $ref: './products/paths/products.id.duplicate.yaml'
  '/products/{productId}/urls':
    $ref: './products/paths/products.id.urls.yaml'
  '/products/{productId}/redirects':
    $ref: './products/paths/products.id.redirects.yaml'
  '/products/{productId}/attributes':
    $ref: './products/paths/products.id.attributes.yaml'
  '/products/{productId}/collections':
    $ref: './products/paths/products.id.collections.yaml'
  '/products/{productId}/categories':
    $ref: './products/paths/products.id.categories.yaml'
  '/products/{productId}/channels':
    $ref: './products/paths/products.id.channels.yaml'
  '/products/{productId}/categories/{categoryId}':
    $ref: './products/paths/products.id.categories.id.yaml'
  '/products/{productId}/collections/{collectionId}':
    $ref: './products/paths/products.id.collections.id.yaml'
  '/products/{productId}/associations':
    $ref: './products/paths/products.id.associations.yaml'
  '/products/{productId}/customer-groups':
    $ref: './products/paths/products.id.customer-groups.yaml'
  '/products/{productId}/drafts':
    $ref: './products/paths/products.id.drafts.yaml'
  '/products/{productId}/publish':
    $ref: './products/paths/products.id.publish.yaml'
  '/recycle-bin':
    $ref: './recycle-bin/paths/recycle-bin.yaml'
  '/recycle-bin/{itemId}':
    $ref: './recycle-bin/paths/recycle-bin.id.yaml'
  '/reports/sales':
    $ref: './reports/paths/reports.sales.yaml'
  '/reports/orders':
    $ref: './reports/paths/reports.orders.yaml'
  '/reports/orders/customers':
    $ref: './reports/paths/reports.orders.customers.yaml'
  '/reports/orders/averages':
    $ref: './reports/paths/reports.orders.averages.yaml'
  '/reports/products/best-sellers':
    $ref: './reports/paths/reports.products.best-sellers.yaml'
  '/reports/metrics/{subject}':
    $ref: './reports/paths/reports.metrics.subject.yaml'
  '/routes':
    $ref: './routes/paths/routes.yaml'
  '/routes/{routeId}':
    $ref: './routes/paths/routes.id.yaml'
  '/routes/search':
    $ref: './routes/paths/routes.search.yaml'
  '/search':
    $ref: './search/paths/search.yaml'
  '/saved-searches/product':
    $ref: './saved-searches/paths/saved-searches.product.yaml'
  '/saved-searches/{savedSearchId}':
    $ref: './saved-searches/paths/saved-searches.saved-search-id.yaml'
  '/settings':
    $ref: './settings/paths/settings.yaml'
  '/settings/{handle}':
    $ref: './settings/paths/settings.handle.yaml'
  '/shipping':
    $ref: './shipping/paths/shipping.yaml'
  '/shipping/{shippingMethodId}':
    $ref: './shipping/paths/shipping.id.yaml'
  '/shipping/zones':
    $ref: './shipping/paths/shipping.zones.yaml'
  '/shipping/zones/{shippingZoneId}':
    $ref: './shipping/paths/shipping.zones.id.yaml'
  '/shipping/{shippingMethodId}/prices':
    $ref: './shipping/paths/shipping.id.prices.yaml'
  '/shipping/prices/{shippingPriceId}':
    $ref: './shipping/paths/shipping.prices.id.yaml'
  '/shipping/{shippingMethodId}/zones':
    $ref: './shipping/paths/shipping.id.zones.yaml'
  '/shipping/{id}/users':
    $ref: './shipping/paths/shipping.id.users.yaml'
  '/tags':
    $ref: './tags/paths/tags.yaml'
  '/tags/{tagId}':
    $ref: './tags/paths/tags.id.yaml'
  '/taxes':
    $ref: './taxes/paths/taxes.yaml'
  '/taxes/{taxId}':
    $ref: './taxes/paths/taxes.id.yaml'
  '/users':
    $ref: './users/paths/users.yaml'
  '/users/{userId}':
    $ref: './users/paths/users.id.yaml'
  '/users/fields':
    $ref: './users/paths/users.fields.yaml'
  '/users/current':
    $ref: './users/paths/users.current.yaml'
  '/versions/{modelId}/restore':
    $ref: './versions/paths/versions.id.restore.yaml'
components:
  securitySchemes:
    auth:
      type: oauth2
      flows:
        password:
          tokenUrl: 'http://localhost:3000/api/v1/oauth/token'
          refreshUrl: 'http://localhost:3000/api/v1/oauth/refresh'
          scopes: {}
        clientCredentials:
          tokenUrl: 'http://localhost:3000/api/v1/oauth/token'
          scopes: {}
          refreshUrl: 'http://localhost:3000/api/v1/oauth/refresh'
      description: ''
tags:
  - name: Channels
    description: Store channels
  - name: Categories
    description: Catalogue Management
  - name: Authentication
    description: Everything to authenticate requests
  - name: Orders
    description: Order Processing
  - name: Attributes
    description: Catalogue Management
  - name: Assets
    description: Catalogue Management
  - name: Associations
    description: Catalogue Management
  - name: Baskets
    description: Order Processing
  - name: Payments
    description: Order Processing
  - name: Collections
    description: Catalogue Management
  - name: Customers
    description: Order Processing
  - name: Discounts
    description: Order Processing
  - name: Languages
    description: System Settings
  - name: Layouts
    description: Catalogue Management
  - name: Products
    description: Catalogue Management
  - name: Product Variants
    description: Catalogue Management
  - name: Taxes
    description: System Settings
